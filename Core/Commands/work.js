// author @GwenDev
import { query } from "../../App/Database.js";
import { dangKyReply } from "../../Handlers/HandleReply.js";
import fs from "fs";
import fsp from "fs/promises";
import path from "path";
import https from "https";

const works = [
    {
        name: 'C√¢u C√°',
        prefixMsg: "‚ö° Ch√∫c M·ª´ng. B·∫°n V·ª´a C√¢u ƒê∆∞·ª£c:",
        done: [
            ['C√° ƒê√®n L·ªìng', 'https://i.imgur.com/BXng765.jpeg'],
            ['C√° M·∫≠p', 'https://i.imgur.com/dyLyvOA.jpeg'],
            ['T√¥m T√≠t', 'https://i.imgur.com/YJiCTWH.jpeg'],
            ['C√° Ng·ª´', 'https://i.imgur.com/eshOIiJ.jpeg'],
            ['C√° Thu', 'https://i.imgur.com/YAS5iGM.jpeg'],
            ['C√° Koi', 'https://i.imgur.com/BXwB4xZ.png'],
            ['C√° Tr√™', 'https://i.imgur.com/IE6LQU3.png'],
            ['T√¥m H√πm ƒê·∫•t', 'https://i.imgur.com/XbSWNha.png'],
            ['C√° Ki·∫øm', 'https://i.imgur.com/nLndbMc.png'],
            ['C√° V·∫πt', 'https://i.imgur.com/7H5XwLb.png'],
            ['C√° H·ªÅ', 'https://i.imgur.com/cLvJZlM.png'],
            ['C√° V√¢y Tay', 'https://i.imgur.com/jw5bqu7.png'],
            ['C√° Ch√©p', 'https://i.imgur.com/7hVzeDJ.png'],
            ['C√° M·∫≠p Tr·∫Øng L·ªõn', 'https://i.imgur.com/TuMhGBS.png'],
            ['C√° M·∫≠p Nh√°m B√∫a', 'https://i.imgur.com/JDVZ3J7.jpeg'],
            ['C√° H·ªìi', 'https://i.imgur.com/wKijFF0.png'],
            ['C√° Kh·ªßng Long Ho√†ng ƒê·∫ø', 'https://i.imgur.com/w42NHef.png'],
            ['C√° H·ªìng V·ªãnh', 'https://i.imgur.com/UjdnHhE.png'],
            ['C√° V∆∞·ª£ng Mi·ªáng R·ªông', 'https://i.imgur.com/Cw0qh57.png'],
            ['C√° Betta', 'https://i.imgur.com/d33003f.png'],
            ['C√° R√¥ Phi', 'https://i.imgur.com/sqBRoDe.png'],
            ['C√° Ng·ª´ ƒê·∫°i D∆∞∆°ng', 'https://i.imgur.com/A1qXwXV.png'],
            ['C√° Nh√°m Voi', 'https://i.imgur.com/K7Qy4mI.png'],
            ['C√° Pecca V√†ng', 'https://i.imgur.com/S9Qqr3D.png'],
            ['C√° M√π L√°n Ch·∫•m Hoa', 'https://i.imgur.com/A5XeYbS.png'],
        ]
    },
    {
        name: 'SƒÉn Th√∫ Hoang',
        prefixMsg: "‚ö° Ch√∫c M·ª´ng. B·∫°n V·ª´a SƒÉn ƒê∆∞·ª£c:",
        done: [
            ['Con R·∫Øn', 'https://i.imgur.com/Q7vv6mG.jpg'],
            ['Con R·ªìng Komodo', 'https://i.imgur.com/Y8mfwPN.jpeg'],
            ['Con B√≥i C√°', 'https://i.imgur.com/XAM9Ne6.jpeg'],
            ['Con G·∫•u N√¢u', 'https://i.imgur.com/A3OxqoB.jpeg'],
            ['Con R·∫Øn Anaconda', 'https://i.imgur.com/4z6kr8V.jpeg'],
            ['Con H∆∞∆°u', 'https://i.imgur.com/lHQKacE.jpg'],
            ['Con Heo R·ª´ng', 'https://i.imgur.com/eQQUR3s.jpg'],
            ['Con S∆∞ T·ª≠', 'https://i.imgur.com/ThGSaPn.jpg'],
        ]
    },
    {
        name: 'Khai Th√°c M·ªè',
        prefixMsg: "‚ö° Ch√∫c M·ª´ng. B·∫°n V·ª´a Khai Th√°c ƒê∆∞·ª£c:",
        done: [
            ['Vi√™n Kim C∆∞∆°ng', 'https://i.imgur.com/9cHq8nN.png'],
            ['V√†ng', 'https://i.imgur.com/HB0Bmqo.jpg'],
            ['Qu·∫∑ng S·∫Øt', 'https://i.imgur.com/wD0VEZ8.png'],
            ['Ng·ªçc L·ª•c B·∫£o', 'https://i.imgur.com/NyYurEd.jpg'],
            ['Ng·ªçc Anh T√≠m', 'https://i.imgur.com/8kc5m2L.jpg'],
            ['Than ƒê√°', 'https://i.imgur.com/CY3lCqx.jpg'],
            ['Ruby C·ª±c Hi·∫øm', 'https://i.imgur.com/OoP1Smk.jpg'],
        ]
    },
    {
        name: 'B·∫Øn Chim',
        prefixMsg: "‚ö° Ch√∫c M·ª´ng. B·∫°n V·ª´a B·∫Øn H·∫° ƒê∆∞·ª£c:",
        done: [
            ['Chim ƒêen', 'https://i.imgur.com/IPeNm8n.jpeg'],
            ['ƒê·∫°i B√†ng', 'https://i.imgur.com/EklUNah.jpeg'],
            ['Chim √ân', 'https://i.imgur.com/kUhS155.jpeg'],
            ['Chim V√†nh Khuy√™n', 'https://i.imgur.com/DErkrnd.jpeg'],
            ['Chim ƒêu√¥i D√†i', 'https://i.imgur.com/PMaurmG.jpeg'],
            ['Chim Ch√≠ch Ch√≤e', 'https://i.imgur.com/muJCa5P.jpeg'],
            ['V·∫πt', 'https://i.imgur.com/2nN01CY.jpeg'],
            ['Chim H·ªça Mi', 'https://i.imgur.com/88Cq2Hf.jpeg'],
            ['Chim Ch√†o M√†o', 'https://i.imgur.com/9R8BrMF.jpeg'],
            ['Chim S·∫ª', 'https://i.imgur.com/yZcWTT6.jpeg'],
            ['Chim V√†ng Anh', 'https://i.imgur.com/bk9a6e4.jpeg'],
            ['Chim Ch√¨a V√¥i', 'https://i.imgur.com/SxhsgX2.jpeg'],
            ['Chim Cu G√°y', 'https://i.imgur.com/ZdFZQ1N.jpeg'],
            ['Chim Y·∫øn Ph·ª•ng', 'https://i.imgur.com/FG61Y7R.jpeg'],
            ['Chim S∆°n Ca', 'https://i.imgur.com/XZSGXkL.jpeg'],
        ]
    }
];

const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const formatTime = (ms) => {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
};

export default {
    name: "work",
    description: "L√†m vi·ªác ki·∫øm ti·ªÅn",
    role: 0,
    cooldown: 0,
    group: "work",
    aliases: ["l√†m vi·ªác", "ki·∫øm ti·ªÅn", "c√¥ng vi·ªác"],
    noPrefix: false,

    async run({ message, api }) {
        const threadId = message.threadId;
        const threadType = message.type;
        const uid = message.data?.uidFrom;

        const [userExists] = await query("SELECT uid FROM users WHERE uid = ?", [uid]);
        if (!userExists) {
            return api.sendMessage("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n trong h·ªá th·ªëng. Vui l√≤ng t∆∞∆°ng t√°c v·ªõi bot tr∆∞·ªõc.", threadId, threadType);
        }

        const workList = works.map((work, index) => `${index + 1}. ${work.name}`).join('\n');

        const workMessage = `üßæ ùêÉùêöùêßùê° ùêíùêöÃÅùêúùê° ùêÇùê®ÃÇùêßùê† ùêïùê¢ùêûÃ£ÃÇùêú.\n${workList}\n‚ãÜ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ãÜ\n‚Ä¢ Reply+ STT ƒê·ªÉ Ch·ªçn C√¥ng Vi·ªác\n‚Ä¢ Th·ªùi Gian H·ªìi S·ª©c L√† 2 Gi·ªù\n‚Ä¢ C√≥ T·ªâ L·ªá G·∫∑p Tai N·∫°n Khi L√†m Vi·ªác`;

        const res = await api.sendMessage({ msg: workMessage, ttl: 2*60*60_000 }, threadId, threadType);
        const msgId = res?.message?.msgId ?? res?.msgId ?? null;
        const cliMsgId = res?.message?.cliMsgId ?? res?.cliMsgId ?? null;

        dangKyReply({
            msgId,
            cliMsgId,
            threadId,
            authorId: uid,
            command: "work",
            onReply: async ({ message, api, content }) => {
                const replyNumber = parseInt(content.trim());
                const senderUid = message.data?.uidFrom;
                const replyThreadId = message.threadId;

                if (isNaN(replyNumber) || replyNumber < 1 || replyNumber > works.length) {
                    await api.sendMessage({ msg: " S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-4.", ttl: 2*60*60_000 }, replyThreadId, message.type);
                    return { clear: false };
                }

                const work = works[replyNumber - 1];
                const [user] = await query("SELECT work_cooldown FROM users WHERE uid = ?", [senderUid]);
                const now = Date.now();
                const cooldownTime = 2 * 60 * 60 * 1000;

                if (!user) {
                    await api.sendMessage({ msg: "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n trong h·ªá th·ªëng. Vui l√≤ng t∆∞∆°ng t√°c v·ªõi bot tr∆∞·ªõc.", ttl: 2*60*60_000 }, replyThreadId, message.type);
                    return { clear: false };
                }

                if (user.work_cooldown && now < user.work_cooldown) {
                    const remaining = user.work_cooldown - now;
                    await api.sendMessage({ msg: ` B·∫°n c·∫ßn ch·ªù ${formatTime(remaining)} ƒë·ªÉ l√†m vi·ªác ti·∫øp theo!`, ttl: 2*60*60_000 }, replyThreadId, message.type);
                    return { clear: false };
                }

                await query(
                    "UPDATE users SET work_cooldown = ? WHERE uid = ?",
                    [now + cooldownTime, senderUid]
                );

                const workingMsg = await api.sendMessage({ msg: ` ƒêang ${work.name}...`, ttl: 2*60*60_000 }, replyThreadId, message.type);

                await new Promise(resolve => setTimeout(resolve, 3500));

                if (Math.random() < 0.2) {
                    try {
                        await api.undo({ 
                            msgId: workingMsg.messageID, 
                            cliMsgId: workingMsg.cliMsgId || 0 
                        }, replyThreadId, message.type);
                    } catch {}
                    await api.sendMessage({ msg: `‚ö†Ô∏è √îi Kh√¥ng B·∫°n G·∫∑p Tai N·∫°n Trong L√∫c L√†m Vi·ªác.`, ttl: 2*60*60_000 }, replyThreadId, message.type);
                    return { clear: true };
                }

                const result = work.done[Math.floor(Math.random() * work.done.length)];
                const money = random(200000, 1000000);

                const resultMessage = `${work.prefixMsg} ${result[0]}\nüíµ Nh·∫≠n ƒê∆∞·ª£c: ${money.toLocaleString()}$\nüí≥ Ti·ªÅn ƒê√£ ƒê∆∞·ª£c ƒê∆∞a V√†o Ng√¢n H√†ng C·ªßa B·∫°n`;

                await query(
                    "UPDATE users SET coins = coins + ? WHERE uid = ?",
                    [money, senderUid]
                );

                try {
                    await api.undo({ 
                        msgId: workingMsg.messageID, 
                        cliMsgId: workingMsg.cliMsgId || 0 
                    }, replyThreadId, message.type);
                } catch {}

                if (result[1]) {
                    try {
                        const cacheDir = path.resolve("Data", "Cache");
                        await fsp.mkdir(cacheDir, { recursive: true });
                        const fileName = `work_${Date.now()}.jpg`;
                        const filePath = path.join(cacheDir, fileName);

                        await new Promise((resolve, reject) => {
                            const file = fs.createWriteStream(filePath);
                            https.get(result[1], (res) => {
                                res.pipe(file);
                                file.on("finish", () => file.close(resolve));
                            }).on("error", async (err) => {
                                await fsp.unlink(filePath).catch(() => {});
                                reject(err);
                            });
                        });

                        await api.sendMessage({
                            msg: resultMessage,
                            attachments: [filePath],
                            ttl: 2*60*60_000
                        }, replyThreadId, message.type);

                        await fsp.unlink(filePath).catch(() => {});
                    } catch {
                        await api.sendMessage({ msg: resultMessage, ttl: 2*60*60_000 }, replyThreadId, message.type);
                    }
                } else {
                    await api.sendMessage({ msg: resultMessage, ttl: 2*60*60_000 }, replyThreadId, message.type);
                }

                return { clear: true };
            }
        });
    }
};
