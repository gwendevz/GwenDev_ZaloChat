// author @GwenDev
import axios from "axios";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default {
  name: "tarot",
  description: "B√≥i b√†i tarot - Xem v·∫≠n m·ªánh qua c√°c l√° b√†i",
  version: "1.0.0",
  author: "GwenDev mod by Raiku",
  group: "game",
  role: 0,
  cooldown: 5,
  aliases: ["b√≥i b√†i", "tarot", "xem b√≥i", "b√†i tarot"],
  noPrefix: false,

  async run({ api, message, args }) {
    const { threadId, type: threadType } = message;
    
    try {
      const response = await axios.get('https://raw.githubusercontent.com/ThanhAli-Official/tarot/main/data.json');
      const tarotData = response.data;
      
      if (!tarotData || !Array.isArray(tarotData)) {
        return api.sendMessage({ msg: "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu tarot t·ª´ h·ªá th·ªëng!", ttl: 12*60*60_000 }, threadId, threadType);
      }
      
      let selectedIndex;
      
      if (args.length > 0) {
        const inputIndex = parseInt(args[0]);
        
        if (isNaN(inputIndex)) {
          return api.sendMessage({ msg: "‚ùå Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± l√° b√†i h·ª£p l·ªá!", ttl: 12*60*60_000 }, threadId, threadType);
        }
        
        if (inputIndex < 1 || inputIndex > tarotData.length) {
          return api.sendMessage({ msg: `‚ö†Ô∏è Kh√¥ng th·ªÉ v∆∞·ª£t qu√° s·ªë b√†i ƒëang c√≥ trong h·ªá th·ªëng d·ªØ li·ªáu (1-${tarotData.length})`, ttl: 12*60*60_000 }, threadId, threadType);
        }
        
        selectedIndex = inputIndex - 1; // Chuy·ªÉn v·ªÅ index 0-based
      } else {
        selectedIndex = Math.floor(Math.random() * tarotData.length);
      }
      
      const selectedCard = tarotData[selectedIndex];
      
      if (!selectedCard) {
        return api.sendMessage({ msg: "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l√° b√†i!", ttl: 12*60*60_000 }, threadId, threadType);
      }
      
      const cardInfo = `üé¥ B√ìI B√ÄI TAROT üé¥\n\nüìù T√™n l√° b√†i: ${selectedCard.name}\n‚úèÔ∏è Thu·ªôc b·ªô: ${selectedCard.suite}\n‚ú¥Ô∏è M√¥ t·∫£: ${selectedCard.vi?.description || "Kh√¥ng c√≥ m√¥ t·∫£"}\nüè∑Ô∏è Di·ªÖn d·ªãch: ${selectedCard.vi?.interpretation || "Kh√¥ng c√≥ di·ªÖn d·ªãch"}\nüìú B√†i ng∆∞·ª£c: ${selectedCard.vi?.reversed || "Kh√¥ng c√≥ th√¥ng tin b√†i ng∆∞·ª£c"}`;
      
      try {
        const imageResponse = await axios.get(selectedCard.image, {
          responseType: "stream"
        });
        
        const tempDir = path.join(__dirname, "../../Temp");
        if (!fs.existsSync(tempDir)) {
          fs.mkdirSync(tempDir, { recursive: true });
        }
        
        const tempFileName = `tarot_${Date.now()}.jpg`;
        const tempFilePath = path.join(tempDir, tempFileName);
        
        const writer = fs.createWriteStream(tempFilePath);
        imageResponse.data.pipe(writer);
        
        await new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
        
        const result = await api.sendMessage({
          msg: cardInfo,
          attachments: [tempFilePath],
          ttl: 12*60*60_000
        }, threadId, threadType);
        
        setTimeout(() => {
          try {
            if (fs.existsSync(tempFilePath)) {
              fs.unlinkSync(tempFilePath);
            }
          } catch (err) {
            console.error("L·ªói khi x√≥a file t·∫°m tarot:", err);
          }
        }, 5000);
        
        return result;
        
      } catch (imageError) {
        console.error("L·ªói khi l·∫•y h√¨nh ·∫£nh tarot:", imageError);
        
        return api.sendMessage({ msg: cardInfo, ttl: 12*60*60_000 }, threadId, threadType);
      }
      
    } catch (error) {
      console.error("L·ªói trong l·ªánh tarot:", error);
      
      if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
        return api.sendMessage({ msg: "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng tarot. Vui l√≤ng th·ª≠ l·∫°i sau!", ttl: 12*60*60_000 }, threadId, threadType);
      }
      
      if (error.response?.status === 404) {
        return api.sendMessage({ msg: "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tarot. H·ªá th·ªëng c√≥ th·ªÉ ƒëang b·∫£o tr√¨!", ttl: 12*60*60_000 }, threadId, threadType);
      }
      
      return api.sendMessage({ msg: "‚ùå C√≥ l·ªói x·∫£y ra khi b√≥i b√†i tarot. Vui l√≤ng th·ª≠ l·∫°i sau!", ttl: 12*60*60_000 }, threadId, threadType);
    }
  }
};
